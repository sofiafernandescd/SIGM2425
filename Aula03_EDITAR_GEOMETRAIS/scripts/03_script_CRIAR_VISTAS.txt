--#############
--# Paulo Trigo
--#############



--=============
-- Liga��o � BD
--=============
\set dataBase my_gis_gps
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================



--------------------------------
DROP TABLE IF EXISTS T_PONTO_FRONTEIRA;
DROP VIEW IF EXISTS V_POLIGONO;
DROP VIEW IF EXISTS V_LINHA_EXTREMO_COINCIDENTE;
DROP VIEW IF EXISTS V_LINHA_CONTORNO;
--------------------------------


----------------------------
-- VIEW V_LINHA_CONTORNO
-- (a partir de GPS_PONTO)
----------------------------
CREATE VIEW V_LINHA_CONTORNO AS
SELECT id_terreno, ST_MakeLine(g_ponto ORDER BY id_ordem) 
AS linha_contorno
FROM gps_ponto
GROUP BY id_terreno;

SELECT * FROM V_LINHA_CONTORNO;


----------------------------
-- TAUX_LINHA_CONTORNO
-- (apenas para usar apresentar no QGIS)
----------------------------
DROP TABLE IF EXISTS TAUX_LINHA_CONTORNO;
CREATE TABLE TAUX_LINHA_CONTORNO ( id SERIAL PRIMARY KEY );
SELECT AddGeometryColumn('', 'taux_linha_contorno', 'g_linha', 0, 'LINESTRING', 2 );

INSERT INTO TAUX_LINHA_CONTORNO( g_linha )
SELECT g_linha FROM V_LINHA_CONTORNO;


----------------------------
-- VIEW V_LINHA_EXTREMO_COINCIDENTE
-- (gerar extremidades coincidentes)
----------------------------
--CREATE VIEW V_LINHA_EXTREMO_COINCIDENTE( id_terreno, g_linha ) AS
--SELECT 

CREATE VIEW V_LINHA_EXTREMO_COINCIDENTE AS
SELECT
  ST_Multi(ST_Boundary(ST_Difference(ST_UnaryUnion(linha_contorno), ST_Boundary(ST_UnaryUnion(linha_contorno)))))
FROM
  V_LINHA_CONTORNO;

SELECT * FROM V_LINHA_EXTREMO_COINCIDENTE;

----------------------------
-- VIEW V_POLIGONO
----------------------------
--CREATE VIEW V_POLIGONO( id_terreno, g_poligono ) AS
--SELECT 

--SELECT id_terreno, ST_AsText( g_poligono ) AS g_poligono
--FROM V_POLIGONO;

CREATE VIEW V_POLIGONO AS
SELECT
  ST_BuildArea(ST_Union(st_multi)) AS poligono
FROM
  V_LINHA_EXTREMO_COINCIDENTE;

SELECT * FROM V_POLIGONO;

----------------------------
-- T_LINHA_EXTREMO_COINCIDENTE
-- (criar tabela para visualizar no QGIS)
----------------------------
DROP TABLE IF EXISTS T_PONTO_FRONTEIRA;
CREATE TABLE T_PONTO_FRONTEIRA( id SERIAL PRIMARY KEY );
SELECT AddGeometryColumn( '', 't_ponto_fronteira', 'g_multi_ponto', 0, 'MULTIPOINT', 2 );


SELECT ST_GeometryN( g_linha,
                     generate_series( 1, ST_NumGeometries( g_linha ) ) ) AS g_linha
FROM V_LINHA_EXTREMO_COINCIDENTE;

SELECT
( CASE WHEN x % 2 = 0
  THEN 'PAR'
  ELSE 'IMPAR'
  END )
FROM generate_series( 1, 10 ) AS x


INSERT INTO T_PONTO_FRONTEIRA (g_multi_ponto)
SELECT ST_Boundary(ST_GeometryN(g_linha, i)) AS g_multi_ponto
FROM V_LINHA_EXTREMO_COINCIDENTE, 
     generate_series(1, ST_NumGeometries(g_linha)) AS i
WHERE NOT ST_IsEmpty(ST_Boundary(ST_GeometryN(g_linha, i)));

