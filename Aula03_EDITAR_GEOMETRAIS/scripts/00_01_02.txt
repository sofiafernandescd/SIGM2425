-----------------------------
-- Delete all data to restart (if needed)
-----------------------------
DELETE FROM gps_ponto;
DELETE FROM terreno;
DELETE FROM tipo_terreno;

DROP TABLE IF EXISTS gps_ponto;
DROP TABLE IF EXISTS terreno;
DROP TABLE IF EXISTS tipo_terreno;

DROP DATABASE IF EXISTS my_gis_gps;

----------------------------
-- Create database (from b04)
-----------------------------

-- CREATE DATABASE my_gis_gps; -- This command needs to be done on PSQL

-----------------------------
-- Paste the following code in the Query Tool
-----------------------------

CREATE EXTENSION postgis;


DELETE FROM gps_ponto;
DELETE FROM terreno;
DELETE FROM tipo_terreno;


DROP TABLE IF EXISTS terreno CASCADE;
DROP TABLE IF EXISTS tipo_terreno;
DROP TABLE IF EXISTS gps_ponto CASCADE;

CREATE TABLE tipo_terreno( 
    id_tipo_terreno VARCHAR PRIMARY KEY
);

CREATE TABLE terreno (
    id_terreno INTEGER PRIMARY KEY,
    id_tipo_terreno VARCHAR,
    CONSTRAINT fk1 FOREIGN KEY(id_tipo_terreno) REFERENCES tipo_terreno(id_tipo_terreno)
);

SELECT AddGeometryColumn('', 'terreno', 'g_terreno', -1, 'POLYGON', 2);

CREATE TABLE gps_ponto(
    id_ordem INTEGER,
    id_terreno INTEGER,
    CONSTRAINT pk_gps_ponto PRIMARY KEY(id_ordem, id_terreno),
    CONSTRAINT fk1 FOREIGN KEY(id_terreno) REFERENCES terreno(id_terreno)
); -- WITH OIDS;

SELECT AddGeometryColumn('', 'gps_ponto', 'g_ponto', -1, 'POINT', 2);



-- 6.c)
-- SELECT ST_AsText(ponto) FROM gps_ponto;

----------------------------
-- Povoar Dados
----------------------------
-- TIPO_TERRENO
----------------------------

INSERT INTO tipo_terreno( id_tipo_terreno )VALUES ('Lago');
INSERT INTO tipo_terreno( id_tipo_terreno )VALUES ('Floresta');
INSERT INTO tipo_terreno( id_tipo_terreno )VALUES ('Pantano');
INSERT INTO tipo_terreno( id_tipo_terreno )VALUES ('Savana');

----------------------------
-- TERRENO
----------------------------
INSERT INTO terreno (id_terreno, id_tipo_terreno) VALUES (1, 'Lago');
INSERT INTO terreno (id_terreno, id_tipo_terreno) VALUES (2, 'Lago');
INSERT INTO terreno (id_terreno, id_tipo_terreno) VALUES (3, 'Floresta');


----------------------------
-- GPS_PONTO
----------------------------
--================================================================================================
-- >> IMPORTANTE:
-- >> DESCOMEMNTAR A PROXIMA LINHA NA RESPOSTA A QUESTAO 3 DO GUIAO DA AULA PRATICA
-- >> (o QuantumGIS apenas regista o layer se ele tiver pelo menos 1 geometria)
--================================================================================================
INSERT INTO gps_ponto VALUES (1, 1,  ST_MakePoint( 0, 0 ) );


--================================================================================================
-- >> IMPORTANTE:
-- >> AS PROXIMAS LINHAS SAO PARA COMPLETAR NA RESPOSTA AS QUESTOES 5 E 6 DO GUIAO DA AULA PRATICA
--================================================================================================
-- 1. Os pontos foram editados no QuantumGis e depois gravados no PostGis
-- 2. Os INSERT foram gerado em:
-- pgAdmin III \ Tools \ Backup \ com a configuracao:
-- | File Options | Format: PLAIN"
-- | Dump Options #1 | Only Data; Use Insert Commands
-- INSERT INTO gps_ponto VALUES (1, 1, 

-- 5.d)



-- 1. Os pontos foram editados no QuantumGis e depois gravados no PostGis
-- 2. Os INSERT foram gerado em:
-- pgAdmin III \ Tools \ Query Tool \ com a interrogacao:
-- SELECT ST_AsText(g_ponto) FROM gps_ponto;
-- e depois executando essa interrogacao para um ficheiro (em Query \ Execute to file)
-- por fim substituindo no ficheiro gerado POINT por ST_MakePoint
-- INSERT INTO gps_ponto VALUES (1, 1,  ST_MakePoint(...);

--5.e)

-- Assuming the center is (-0.3, 0.3) and radius is 0.5
--DELETE FROM gps_ponto;

INSERT INTO gps_ponto VALUES (1, 1,  ST_MakePoint( 0, 0 ) );
--terreno_lago
INSERT INTO public.gps_ponto VALUES (2, 1, '0101000000CC83FED87822D53F00C055457BA5B1BF');
INSERT INTO public.gps_ponto VALUES (3, 1, '01010000006819D10754C7CE3F08D3DC057F15D7BF');
INSERT INTO public.gps_ponto VALUES (5, 1, '010100000040E5417F6C3CC1BFB0224C5610ADDEBF');
INSERT INTO public.gps_ponto VALUES (6, 1, '0101000000CEE0CCE9D31BD4BF185A9D09EF6AC8BF');
INSERT INTO public.gps_ponto VALUES (7, 1, '0101000000D81D469DECE7CBBF201D2456D69EC03F');
INSERT INTO public.gps_ponto VALUES (8, 1, '0101000000D02630C81D29B63FFCDBC630B056D13F');
INSERT INTO public.gps_ponto VALUES (10, 2, '010100000044681E11CF15DBBF2C5C8FC2F528E43F');
INSERT INTO public.gps_ponto VALUES (11, 2, '010100000028143A2BA55DD6BF5A921004E471DD3F');
INSERT INTO public.gps_ponto VALUES (12, 2, '0101000000E354062D4001E0BF5EEFDE143F6BDC3F');
INSERT INTO public.gps_ponto VALUES (13, 2, '01010000000963873420ACE2BF831FA7326801E23F');
INSERT INTO public.gps_ponto VALUES (30, 2, '0101000000E354062D4001E0BF82322EF36B71E73F');


----xx_paraTestarGeo-------
INSERT INTO gps_ponto VALUES (1, 1,  ST_MakePoint(-1.21383647798742, 0.534591194968554) );
INSERT INTO gps_ponto VALUES (2, 1,  ST_MakePoint(-1.05450733752621, 0.59748427672956) );
INSERT INTO gps_ponto VALUES (3, 1,  ST_MakePoint(-0.920335429769392, 0.547169811320755) );
INSERT INTO gps_ponto VALUES (4, 1,  ST_MakePoint(-0.836477987421384, 0.467505241090147) );
INSERT INTO gps_ponto VALUES (5, 1,  ST_MakePoint(-0.761006289308176, 0.383647798742138) );
INSERT INTO gps_ponto VALUES (6, 1,  ST_MakePoint(-0.731656184486373, 0.287211740041929) );
INSERT INTO gps_ponto VALUES (7, 1,  ST_MakePoint(-0.807127882599581, 0.194968553459119) );
INSERT INTO gps_ponto VALUES (8, 1,  ST_MakePoint(-0.890985324947589, 0.161425576519916) );
INSERT INTO gps_ponto VALUES (9, 1,  ST_MakePoint(-0.979035639412998, 0.165618448637317) );
INSERT INTO gps_ponto VALUES (10, 1, ST_MakePoint(-1.05450733752621, 0.174004192872117) );
INSERT INTO gps_ponto VALUES (11, 1, ST_MakePoint(-1.13836477987421, 0.174004192872117) );
INSERT INTO gps_ponto VALUES (12, 1, ST_MakePoint(-1.21383647798742, 0.211740041928721) );
INSERT INTO gps_ponto VALUES (13, 1, ST_MakePoint(-1.24737945492662, 0.295597484276729) );
INSERT INTO gps_ponto VALUES (14, 1, ST_MakePoint(-1.20964360587002, 0.371069182389937) );
INSERT INTO gps_ponto VALUES (15, 1, ST_MakePoint(-1.16352201257862, 0.446540880503145) );
INSERT INTO gps_ponto VALUES (16, 1, ST_MakePoint(-1.12578616352201, 0.513626834381551) );
INSERT INTO gps_ponto VALUES (17, 1, ST_MakePoint(-1.13417190775681, 0.631027253668763) );

INSERT INTO gps_ponto VALUES (1, 2,  ST_MakePoint(-0.733881256233333, 0.194206509128656) );
INSERT INTO gps_ponto VALUES (2, 2,  ST_MakePoint(-0.68217947935112, 0.242078524760334) );
INSERT INTO gps_ponto VALUES (3, 2,  ST_MakePoint(-0.618988418717304, 0.226759479758197) );
INSERT INTO gps_ponto VALUES (4, 2,  ST_MakePoint(-0.576861044961427, 0.167398180374916) );
INSERT INTO gps_ponto VALUES (5, 2,  ST_MakePoint(-0.599839612464633, 0.102292239115833) );
INSERT INTO gps_ponto VALUES (6, 2,  ST_MakePoint(-0.657286031222647, 0.0678243878610244) );
INSERT INTO gps_ponto VALUES (7, 2,  ST_MakePoint(-0.728136614357531, 0.0716541491115587) );
INSERT INTO gps_ponto VALUES (8, 2,  ST_MakePoint(-0.766434226862874, 0.115696403492703) );
INSERT INTO gps_ponto VALUES (9, 2,  ST_MakePoint(-0.730051494982798, 0.155908896623313) );
INSERT INTO gps_ponto VALUES (10, 2, ST_MakePoint(-0.691753882477455, 0.205695792880259) );
INSERT INTO gps_ponto VALUES (11, 2, ST_MakePoint(-0.640052105595243, 0.259312450387739) );


DROP TABLE IF EXISTS T_PONTO_FRONTEIRA;
DROP VIEW IF EXISTS V_POLIGONO;
DROP VIEW IF EXISTS V_LINHA_EXTREMO_COINCIDENTE;
DROP VIEW IF EXISTS V_LINHA_CONTORNO;

CREATE VIEW V_LINHA_CONTORNO( g_linha, id_terreno ) AS ( 
  SELECT ST_MakeLine( g_ponto ), 
  id_terreno FROM ( 
    SELECT g_ponto, id_ordem, id_terreno FROM gps_ponto
    ORDER BY id_terreno, id_ordem ) AS pontos_ordenados GROUP BY id_terreno );

DROP TABLE IF EXISTS TAUX_LINHA_CONTORNO;
CREATE TABLE TAUX_LINHA_CONTORNO ( id SERIAL PRIMARY KEY );
SELECT AddGeometryColumn('', 'taux_linha_contorno', 'g_linha', 0, 'LINESTRING', 2 );

INSERT INTO TAUX_LINHA_CONTORNO( g_linha )
SELECT g_linha
FROM V_LINHA_CONTORNO;


CREATE VIEW V_LINHA_EXTREMO_COINCIDENTE( id_terreno, g_linha ) AS 
SELECT id_terreno, ST_UnaryUnion( g_linha ) AS g_linha FROM V_LINHA_CONTORNO;

CREATE VIEW V_POLIGONO( id_terreno, g_poligono ) AS 
SELECT id_terreno, ST_BuildArea( g_linha )
FROM V_LINHA_EXTREMO_COINCIDENTE;

SELECT * FROM V_POLIGONO;

DROP TABLE IF EXISTS T_PONTO_FRONTEIRA;
CREATE TABLE T_PONTO_FRONTEIRA( id SERIAL PRIMARY KEY );
SELECT AddGeometryColumn( '', 't_ponto_fronteira', 'g_multi_ponto', 0, 'MULTIPOINT', 2 );


SELECT ST_GeometryN( g_linha,
                     generate_series( 1, ST_NumGeometries( g_linha ) ) ) AS g_linha
FROM V_LINHA_EXTREMO_COINCIDENTE;



-----------
-- b04
DROP TABLE IF EXISTS T_PONTO_FRONTEIRA;
DROP VIEW IF EXISTS V_POLIGONO;
DROP VIEW IF EXISTS V_LINHA_EXTREMO_COINCIDENTE;
DROP VIEW IF EXISTS V_LINHA_CONTORNO;

CREATE VIEW V_LINHA_CONTORNO( g_linha, id_terreno ) AS
( SELECT ST_MakeLine( g_ponto ), id_terreno FROM ( 
    SELECT g_ponto, id_ordem, id_terreno
         FROM gps_ponto
ORDER BY id_terreno, id_ordem ) AS pontos_ordenados GROUP BY id_terreno );


CREATE VIEW V_LINHA_EXTREMO_COINCIDENTE( id_terreno, g_linha ) AS 
SELECT 
id_terreno,
ST_UnaryUnion( g_linha ) AS g_linha FROM V_LINHA_CONTORNO;

CREATE VIEW V_POLIGONO( id_terreno, g_poligono ) AS 
SELECT id_terreno, ST_BuildArea( g_linha )
FROM V_LINHA_EXTREMO_COINCIDENTE;

SELECT * FROM V_POLIGONO;