--#############
--# Paulo Trigo
--#############


--=============
-- Ligacao a BD
--=============
\set dataBase aug_real_db
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================


-- Funções de Perseguição
------------------------
CREATE OR REPLACE FUNCTION obter_aceleracao_perseguidor(perseguidor_id INTEGER, alvo_id INTEGER, velocidade_a_perseguir REAL)
RETURNS t_aceleracao AS $$
DECLARE
    posicao_perseguidor geometry;
    posicao_alvo geometry;
    direcao t_vector;
    aceleracao t_aceleracao;
BEGIN
    SELECT posicao INTO posicao_perseguidor FROM trajetoria WHERE objeto_id = perseguidor_id ORDER BY timestamp DESC LIMIT 1;
    SELECT posicao INTO posicao_alvo FROM trajetoria WHERE objeto_id = alvo_id ORDER BY timestamp DESC LIMIT 1;

    direcao := normalizar(ROW(ST_X(posicao_alvo) - ST_X(posicao_perseguidor), ST_Y(posicao_alvo) - ST_Y(posicao_perseguidor))::t_vector);
    aceleracao.linear := produto_vector_por_escalar(direcao, velocidade_a_perseguir);
    aceleracao.angular := 0; -- Por enquanto, aceleração angular zero (pode ser implementada depois)
    RETURN aceleracao;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION simular_passo(perseguidor_id INTEGER, alvo_id INTEGER, tempo REAL)
RETURNS VOID AS $$
DECLARE
    objeto_atual RECORD; -- Registro para armazenar os dados do objeto
    aceleracao_calculada t_aceleracao;
    tipo_objeto RECORD;
    nova_velocidade t_velocidade;
    nova_orientacao REAL;
    nova_posicao geometry;
    modificador_terreno REAL := 1.0;
    terreno RECORD;
    rio RECORD;
    ultima_trajetoria RECORD;
BEGIN
    -- Obter dados atuais do perseguidor (CORREÇÃO AQUI)
    SELECT velocidade, orientacao INTO objeto_atual
    FROM objeto
    WHERE id_objeto = perseguidor_id;

    -- Verificar se o objeto foi encontrado
    IF NOT FOUND THEN
        RAISE NOTICE 'Objeto com ID % não encontrado!', perseguidor_id;
        RETURN; -- Sai da função se o objeto não existir
    END IF;

    SELECT * INTO tipo_objeto FROM tipo_objeto WHERE id_tipo_objeto = (SELECT tipo_objeto_id FROM objeto WHERE id_objeto = perseguidor_id);

    -- Calcular aceleração de perseguição
    aceleracao_calculada := obter_aceleracao_perseguidor(perseguidor_id, alvo_id, tipo_objeto.max_aceleracao_linear);

    -- Calcular novos valores
    nova_velocidade := novo_velocidade(objeto_atual.velocidade, aceleracao_calculada, tempo);--, tipo_objeto.max_velocidade_linear, tipo_objeto.max_velocidade_angular);
    nova_orientacao := novo_orientacao(objeto_atual.orientacao, nova_velocidade, tempo::INTEGER);

    -- Obter a última trajetória (tratamento para a primeira iteração)
    SELECT * INTO ultima_trajetoria FROM trajetoria WHERE objeto_id = perseguidor_id ORDER BY timestamp DESC LIMIT 1;
    IF NOT FOUND THEN
        -- Se não houver trajetórias, usa o centro de massa do objeto como posição inicial
        SELECT centro_de_massa INTO nova_posicao FROM objeto WHERE id_objeto = perseguidor_id;
    ELSE
        nova_posicao := ultima_trajetoria.posicao;
    END IF;

    -- Calcular modificador de terreno (incluindo rios)
    FOR terreno IN SELECT * FROM terreno WHERE ST_Contains(g_terreno, nova_posicao) LOOP
        SELECT percent_modif_tipo_terreno INTO modificador_terreno FROM tipo_terreno WHERE id_tipo_terreno = terreno.tipo_terreno_id;
        EXIT; -- Assume apenas um terreno por vez
    END LOOP;

    FOR rio IN SELECT * FROM rio WHERE ST_Intersects(g_caudal, nova_posicao) LOOP
        modificador_terreno := modificador_terreno * rio.percent_modif_rio;
        EXIT; -- Assume apenas um rio por vez
    END LOOP;

    -- Aplicar modificador de terreno à velocidade linear
    nova_velocidade.linear := produto_vector_por_escalar(nova_velocidade.linear, modificador_terreno);

    -- Calcular nova posição (APÓS aplicar o modificador)
    nova_posicao := novo_posicao(nova_posicao, nova_velocidade, nova_orientacao);

    -- Atualizar objeto com nova velocidade e orientação
    UPDATE objeto SET velocidade = nova_velocidade, orientacao = nova_orientacao WHERE id_objeto = perseguidor_id;

    -- Inserir nova trajetória com timestamp
    INSERT INTO trajetoria (objeto_id, timestamp, posicao, orientacao, velocidade_linear, velocidade_angular, aceleracao_linear, aceleracao_angular)
    VALUES (perseguidor_id, clock_timestamp(), nova_posicao, nova_orientacao, nova_velocidade.linear, nova_velocidade.angular, aceleracao_calculada.linear, aceleracao_calculada.angular);

END;
$$ LANGUAGE plpgsql;

DO $$
BEGIN
    FOR i IN 1..20 LOOP -- Simula 20 passos
        PERFORM simular_passo(1, 2, 0.1); -- Perseguidor 1 (Carro) perseguindo Alvo 1 (Drone)
        PERFORM simular_passo(3, 4, 0.1); -- Perseguidor 2 (Jipe) perseguindo Alvo 2 (Carro)
        PERFORM simular_passo(5, 6, 0.1); -- Perseguidor 3 (Barco) perseguindo Alvo 3 (Drone)
    END LOOP;
END $$;
---------------------------

UPDATE objeto
SET velocidade = novo_velocidade(velocidade, aceleracao, tempo),
    orientacao = novo_orientacao(orientacao, velocidade, tempo)
WHERE id_objeto = objeto_id;


INSERT INTO trajetoria (objeto_id, timestamp, posicao)
VALUES (objeto_id, NOW(), novo_posicao(
    (SELECT posicao FROM trajetoria WHERE objeto_id = objeto_id ORDER BY timestamp DESC LIMIT 1), -- Posição anterior
    (SELECT velocidade FROM objeto WHERE id_objeto = objeto_id), -- Velocidade atualizada
    tempo
));

-- (Seus tipos de dados, funções de vetores e funções de cinemática já definidos)

-- Exemplo de uso dentro de um bloco PL/pgSQL (para simular um "loop" de atualização):
DO $$
DECLARE
    objeto_id INTEGER := 1; -- Substitua pelo ID do seu objeto
    tempo real := 0.1;      -- Intervalo de tempo entre as atualizações
BEGIN
    -- Atualiza velocidade e orientação na tabela objeto
    UPDATE objeto
    SET velocidade = novo_velocidade(velocidade, aceleracao, tempo),
        orientacao = novo_orientacao(orientacao, velocidade, tempo)
    WHERE id_objeto = objeto_id;

    -- Insere nova posição na tabela trajetoria
    INSERT INTO trajetoria (objeto_id, timestamp, posicao)
    VALUES (objeto_id, NOW(), novo_posicao(
        (SELECT posicao FROM trajetoria WHERE objeto_id = objeto_id ORDER BY timestamp DESC LIMIT 1),
        (SELECT velocidade FROM objeto WHERE id_objeto = objeto_id),
        tempo
    ));
END $$;
-----------------------------
-----------------------------
-- Simulacao de trajectorias:
-- [1] Iniciacao dos dados
-----------------------------
-----------------------------
DELETE FROM cinematica_hist;
DELETE FROM cinematica;

--________________________________________________
-- Inserir dados para caracterizacao da cinematica
--________________________________________________
INSERT INTO cinematica( id, g_posicao, orientacao, velocidade, aceleracao ) VALUES(
1,
ST_GeomFromText( 'POINT( 5 6 )', 3763 ),
0.0,
ROW( ROW( 1, 1 ), 1.3 ),
ROW( ROW( 0.5, 3 ), 1.0 )
);

INSERT INTO cinematica( id, g_posicao, orientacao, velocidade, aceleracao ) VALUES(
2,
ST_GeomFromText( 'POINT( 2 3 )', 3763 ),
0.0,
ROW( ROW( 1, 1 ), 0.3 ),
ROW( ROW( 2, 0.5 ), 1.0 )
);

/*

--------------------------------------------
--------------------------------------------
-- Simulacao de trajectorias:
-- [2] Executar as linhas (A) e (B) em ciclo
--------------------------------------------
--------------------------------------------
DO $$
BEGIN
FOR count in 1..10 LOOP
RAISE NOTICE 'count: %', count;
-- (A)

INSERT INTO cinematica_hist
SELECT nextval('cinematica_hist_id_hist_seq'), id, orientacao, velocidade , aceleracao, g_posicao
FROM cinematica;

-- (B)
UPDATE cinematica
SET velocidade = novo_velocidade( velocidade, aceleracao, 1 );

UPDATE cinematica
SET g_posicao = novo_posicao( g_posicao, velocidade, 1 );

UPDATE cinematica
SET orientacao = novo_orientacao( orientacao, velocidade, 1 );
--________________________________________________________________________________________________
END LOOP;
END ; $$;
--
SELECT * FROM cinematica_hist;
-- ==========================
-- Separar os dois movimentos
-- ==========================
DROP VIEW IF EXISTS v_trajectoria_1;
CREATE VIEW v_trajectoria_1 AS
SELECT id_hist, id, orientacao, velocidade, aceleracao, 
ST_AsText(g_posicao) AS g_posicao--*
FROM cinematica_hist
WHERE id = 1;

DROP VIEW IF EXISTS v_trajectoria_2;
CREATE VIEW v_trajectoria_2 AS
SELECT id_hist, id, orientacao, velocidade, aceleracao, 
ST_AsText(g_posicao) AS g_posicao --SELECT *
FROM cinematica_hist
WHERE id = 2;


-- ========================================
-- Separar as duas estruturas de cinematica
-- ========================================
DROP VIEW IF EXISTS v_cinematica_1;
CREATE VIEW v_cinematica_1 AS
SELECT *
FROM cinematica
WHERE id = 1;

DROP VIEW IF EXISTS v_cinematica_2;
CREATE VIEW v_cinematica_2 AS
SELECT *
FROM cinematica
WHERE id = 2;


*/