--#############
--# Paulo Trigo
--#############


--=============
-- Liga��o � BD
--=============
\set dataBase my_gis_aug_real
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================



----------------------------
----------------------------
-- Simulacao de perseguicao:
-- [1] Iniciacao dos dados
----------------------------
----------------------------
-- no caso de ja ter construido objecto_movel sera' preciso fazer:
DELETE FROM objecto_movel;
DELETE FROM pp;
DELETE FROM cinematica_hist;
DELETE FROM cinematica;

--_________________________________________________________________________________________
-- Inserir dados para caracterizacao da cinematica
-- ATENCAO: o velocidade esta normalizada portanto a aceleraao tamb�m deve estar em [-1, 1]
--_________________________________________________________________________________________
INSERT INTO cinematica( id, g_posicao, orientacao, velocidade, aceleracao ) VALUES(
1,
ST_GeomFromText( 'POINT( 10 7.5 )', 3763 ),
0.0,
ROW( ROW( 1, 1 ), 1.3 ),
ROW( ROW( 0.3, -0.1 ), 1.0 )
);

INSERT INTO cinematica( id, g_posicao, orientacao, velocidade, aceleracao ) VALUES(
2,
ST_GeomFromText( 'POINT( 1 2 )', 3763 ),
0.0,
ROW( ROW( 0.5, 0.5 ), 0.3 ),
ROW( ROW( 0.2, 0.5 ), 1.0 )
);


-- Inserir dados para caracterizacao da perseguicao
--_________________________________________________
INSERT INTO pp( id_perseguidor, id_alvo )
VALUES( 1, 2 );

-- INSERT INTO pp( id_perseguidor, id_alvo ) VALUES( 2, 1 );



--------------------------------------------
--------------------------------------------
-- Simulacao de perseguicao:
-- [2] Executar as linhas (A) e (B) em ciclo
-- (e.g., OBJECTo com id=1 atras de id=2 
--  com velocidade-de-perseguicao=0.2)
--------------------------------------------
--------------------------------------------

DO $$
BEGIN
FOR count in 1..300 LOOP
-- RAISE NOTICE 'count: %', count;

-- (A)
INSERT INTO cinematica_hist
SELECT nextval('cinematica_hist_id_hist_seq'), id, orientacao, velocidade , aceleracao, g_posicao
FROM cinematica;

-- (B)
UPDATE cinematica
SET aceleracao = obter_aceleracao_perseguidor( pp.id_perseguidor, pp.id_alvo, 0.2 )
--SET aceleracao = obter_aceleracao_perseguidor( pp.id_perseguidor, pp.id_alvo, 1 )
FROM pp
WHERE id = pp.id_perseguidor;

UPDATE cinematica
SET velocidade = novo_velocidade( velocidade, aceleracao, 1 )
FROM pp
WHERE id = pp.id_perseguidor;

UPDATE cinematica
SET g_posicao = novo_posicao( g_posicao, velocidade, 1 )
FROM pp
WHERE id = pp.id_perseguidor;

UPDATE cinematica
SET orientacao = novo_orientacao( orientacao, velocidade, 1 )
FROM pp
WHERE id = pp.id_perseguidor;
--________________________________________________________________________________________________

END LOOP;
END ; $$;

-- SELECT * FROM cinematica_hist;
-- ==========================
-- Separar os dois movimentos
-- ==========================
DROP VIEW IF EXISTS v_trajectoria_1;
CREATE VIEW v_trajectoria_1 AS
SELECT id_hist, id, orientacao, velocidade, aceleracao, 
ST_AsText(g_posicao) AS g_posicao--*
FROM cinematica_hist
WHERE id = 1;

DROP VIEW IF EXISTS v_trajectoria_2;
CREATE VIEW v_trajectoria_2 AS
SELECT id_hist, id, orientacao, velocidade, aceleracao, 
ST_AsText(g_posicao) AS g_posicao --SELECT *
FROM cinematica_hist
WHERE id = 2;


-- ========================================
-- Separar as duas estruturas de cinematica
-- ========================================
DROP VIEW IF EXISTS v_cinematica_1;
CREATE VIEW v_cinematica_1 AS
SELECT *
FROM cinematica
WHERE id = 1;

DROP VIEW IF EXISTS v_cinematica_2;
CREATE VIEW v_cinematica_2 AS
SELECT *
FROM cinematica
WHERE id = 2;






