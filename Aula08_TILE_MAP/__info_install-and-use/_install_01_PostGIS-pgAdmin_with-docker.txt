================================================================================
:: Paulo Trigo Silva (PTS)
- PostGIS
(PostgreSQL)
- pgAdmin
================================================================================
(1) install docker and test
(2) install PostGIS into Docker
(3) install pgAdmin into Docker
(4) create and launch containers (micro-services) - PostGIS and pgAdmin
(5) test pgAdmin-PostGIS interaction
(6) test psql-PostGIS interaction
(7) use psql to (directly) create a new PostGIS database (named "my_gis")
(8) stop and start a container
(9) summarise the typical development workflow



________________________________________________________________________________
(1) install docker and test

:: download and install "Docker Desktop" (for Windows or Mac)
- https://docs.docker.com/desktop/windows/install/
- https://docs.docker.com/docker-for-mac/install/

(info) on Docker and how to start and the command-line tools:
- https://docs.docker.com/get-started/
- https://docs.docker.com/get-started/overview/

(info) command-line tips for beginners:
- https://spin.atomicobject.com/2018/10/04/docker-command-line/


:: start Docker daemon (server)
(launch) "Docker.app" (in "Applications" at Mac)

:: test Docker
(execute) open a command prompt and execute:
$ docker --version
$ Docker version 19.03.13, build 4484c46d9d // info of my installation
$ docker run hello-world
(read the message printed after executing the command)

:: important commands to list containers, images and processes
$ docker container ls
$ docker image ls
$ docker ps --all



________________________________________________________________________________
(2) install PostGIS into Docker
(3) install PgAdmin into Docker

(execute) open a command prompt and execute:
$ docker pull postgis/postgis
$ docker pull dpage/pgadmin4

(info) on how to install a PostGIS image into Docker
https://registry.hub.docker.com/r/postgis/postgis/
https://sites.temple.edu/spatialdb/2019/09/04/creating-a-postgis-server-in-docker/

(info) additional
- https://medium.com/spatial-data-science/how-to-install-postgis-and-pgadmin4-with-docker-easily-3f4cb3551bef
- https://blog.crunchydata.com/blog/easy-postgresql-10-and-pgadmin-4-setup-with-docker



________________________________________________________________________________
(4) create and launch containers (micro-services) - PostGIS and pgAdmin

(execute) remove (possibly previous) network, container, volume:
$ docker network rm my_docker_network
$ docker container rm docker_postgis -f
$ docker volume rm volume_postgis -f

(execute) create docker network to connect containers (e.g., PostGIS and pgAdmin):
$ docker network create --driver bridge my_docker_network
$ docker network ls

(execute) create docker PostGIS volume (to hold persistent data):
$ docker volume create volume_postgis
$ docker volume ls

(execute) create and launch container (micro-service) - PostGIS
$ docker run -d --name docker_postgis -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=PTS_POSTGIS_TEST --network=my_docker_network --publish 5431:5431 --volume=volume_postgis:/var/lib/postgis/data --hostname=postgres postgis/postgis

$ docker container ls
:: notice PORTS info (important for client connections; e.g., pgAdmin):
0.0.0.0:5431->5431/tcp, 5432/tcp

(execute) create docker pgAdmin volume (to hold persistent data):
$ docker volume create volume_pgadmin
$ docker volume ls

(execute) create and launch container (micro-service) - pgAdmin
$ docker run -d --name docker_pgadmin -e PGADMIN_LISTEN_PORT=5050 -e PGADMIN_DEFAULT_EMAIL=x@y.z -e PGADMIN_DEFAULT_PASSWORD=postgres --network=my_docker_network --publish 5050:5050 --volume=volume_pgadmin:/var/lib/pgadmin --hostname=pgadmin dpage/pgadmin4
$ docker container ls



________________________________________________________________________________
(5) test pgAdmin-PostGIS interaction

:: point a Browser to:
http://localhost:5050/
user: x@y.z
pass: postgres

(execute) set server using "pgAdmin \ Servers \ Create \ Server...":
at <General> tab:
Name: a_server_connection (or any other name that you prefer!)
(you may notice at the bottom a "red" message)

at <Connection> tab:
host: docker_postgis \\ cf., note (a)
port: 5432 \\ cf., note (b)
maintenance-database: postgres
username: postgres
pass: postgres
save-password: check
<Save>

(a) from "NAMES" column from "docker container ls"
(b) from "PORTS" column from "docker container ls"

(execute) test using "pgAdmin \ Tools \ Query Tool":
SELECT postgis_full_version();

(output) from my own setup:
POSTGIS="3.1.4 ded6c34" [EXTENSION] PGSQL="130" GEOS="3.9.0-CAPI-1.16.2" PROJ="7.2.1" LIBXML="2.9.10" LIBJSON="0.15" LIBPROTOBUF="1.3.3" WAGYU="0.5.0 (Internal)" TOPOLOGY



________________________________________________________________________________
(6) test psql-PostGIS interaction

(execute) open a command prompt and execute:
$ docker exec -it docker_postgis psql -U postgres
postgres=# SELECT version();
PostgreSQL 13.4...
postgres=# \q

(info) the general way to execute a command within a container is:
(info) "docker exec -it CONTAINER COMMAND"

(execute) open a command prompt and launch a "bash":
$ docker exec -it docker_postgis bash
$ su postgres
$ psql


________________________________________________________________________________
(7) use psql to (directly) create a new PostGIS database (named "my_gis")

(execute) open a command prompt and execute:
$ docker exec -it docker_postgis psql -U postgres -c "CREATE DATABASE my_gis;"
(info) use pgAdmin to check that "my_gis" was created and check its "Extensions"

$ docker exec -it docker_postgis psql -U postgres -d my_gis -c "CREATE EXTENSION postgis;"
(info) use pgAdmin to check that "my_gis" "Extensions" now include "postgis"



________________________________________________________________________________
(8) stop and start a container

(execute) open a command prompt and execute:
$ docker stop docker_postgis
(info) use pgAdmin to check that the server is not running

$ docker start docker_postgis
(info) use pgAdmin to check that the server is running



________________________________________________________________________________
(9) summarise the typical development workflow

1. create and test individual containers for each component of your application by first creating Docker images (https://docs.docker.com/get-started/part2/)

2. assemble your containers and supporting infrastructure into a complete application

3. test, share, and deploy your complete containerized application
